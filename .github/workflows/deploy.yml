name: Deploy Quipu to AWS EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  APP_NAME: 'quipu'
  SERVICE_NAME: 'quipu.service'
  MAIN_FILE: 'app.py'
  SERVICE_PORT: '8080'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Run tests (if they exist)
        run: |
          if [ -d "tests" ]; then
            pytest tests/ --cov=. --cov-report=xml
          else
            echo "No tests directory found, skipping tests"
          fi

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.sha }}
      
      - name: Debug checkout info
        run: |
          echo "Current commit: $(git rev-parse HEAD)"
          echo "GitHub SHA: ${{ github.sha }}"
          echo "GitHub REF: ${{ github.ref }}"
          git log -1 --oneline
          echo "Checking app.py content..."
          head -30 app.py

      - name: Clear GitHub cache
        run: echo "CACHE_BUST=$(date +%s)-$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Validate logging configuration
        run: |
          echo "Validating app.py has the corrected logging setup..."
          if grep -q "log_file_candidates" app.py; then
            echo "✅ Found multi-fallback logging configuration"
          else
            echo "❌ app.py doesn't have the corrected logging code"
            echo "Current setup_logging function:"
            sed -n '/def setup_logging/,/^def\|^class\|^$/p' app.py
            exit 1
          fi
          
          echo "Checking for hardcoded problematic paths..."
          if grep -n "/var/log/quipu\.log" app.py | grep -v "candidates\|#"; then
            echo "❌ Found hardcoded problematic log path"
            exit 1
          else
            echo "✅ No hardcoded problematic log paths found"
          fi
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt
      
      - name: Create version file
        run: |
          echo "VERSION=$(date +%Y%m%d-%H%M%S)-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo ${{ env.VERSION }} > version.txt

      - name: Clean previous build
        run: |
          rm -rf build dist *.spec
      
      - name: Force fresh build
        run: |
          chmod +x scripts/force_fresh_build.sh
          ./scripts/force_fresh_build.sh
      
      - name: Pre-build validation
        run: |
          chmod +x scripts/pre_build_check.sh
          ./scripts/pre_build_check.sh
      
      - name: Build binary with PyInstaller
        run: |
          pyinstaller \
            --onefile \
            --name ${{ env.APP_NAME }} \
            --strip \
            --optimize=2 \
            --add-data "core:core" \
            --add-data "api:api" \
            --add-data "integrations:integrations" \
            --add-data "config.py:." \
            --hidden-import=telegram \
            --hidden-import=telegram.ext \
            --hidden-import=uvicorn \
            --hidden-import=flask \
            --hidden-import=supabase \
            --hidden-import=redis \
            --hidden-import=gspread \
            --hidden-import=oauth2client \
            --hidden-import=langchain_openai \
            --hidden-import=aiohttp \
            --hidden-import=aiofiles \
            --hidden-import=httpx \
            --hidden-import=requests \
            --hidden-import=pywa_async \
            --collect-all telegram \
            --collect-all uvicorn \
            --collect-all flask \
            --collect-all aiohttp \
            --exclude-module=matplotlib \
            --exclude-module=numpy \
            --exclude-module=pandas \
            --exclude-module=scipy \
            --distpath dist \
            --workpath build \
            --specpath . \
            ${{ env.MAIN_FILE }}
      
      - name: Debug service file content
        run: |
          echo "=== Content of quipu-freetier.service ==="
          cat deploy_scripts/quipu-freetier.service
          echo "=== Checking for LOG_FILE ==="
          grep -n "LOG_FILE" deploy_scripts/quipu-freetier.service || echo "LOG_FILE not found!"
      
      - name: Create deployment package
        run: |
          mkdir -p deploy
          cp dist/${{ env.APP_NAME }} deploy/
          cp version.txt deploy/
          cp deploy_scripts/install.sh deploy/
          cp deploy_scripts/quipu.service deploy/
          chmod +x deploy/${{ env.APP_NAME }}
          chmod +x deploy/install.sh
          tar -czf ${{ env.APP_NAME }}-${{ env.VERSION }}.tar.gz -C deploy .
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: quipu-binary-${{ github.sha }}
          path: ${{ env.APP_NAME }}-${{ env.VERSION }}.tar.gz
          retention-days: 30

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.sha }}
      
      - name: Debug checkout info
        run: |
          echo "Current commit: $(git rev-parse HEAD)"
          echo "GitHub SHA: ${{ github.sha }}"
          git log -1 --oneline
      
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: quipu-binary-${{ github.sha }}
      
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          echo "Host ${{ secrets.EC2_HOST }}" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  UserKnownHostsFile /dev/null" >> ~/.ssh/config
          
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'SSH connection successful'"
      
      - name: Deploy to server
        run: |
          set -e
          
          echo "Starting deployment to ${{ secrets.EC2_HOST }}"
          
          # Transfer package
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ env.APP_NAME }}-*.tar.gz ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/
          
          # Create deployment script
          cat > deploy.sh << 'DEPLOY_EOF'
          #!/bin/bash
          set -e
          
          echo "=== Starting deployment ==="
          
          APP_NAME="quipu"
          SERVICE_NAME="quipu.service"
          DEPLOY_DIR="/opt/quipu"
          BACKUP_DIR="/opt/backups/quipu"
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          
          # Create directories
          sudo mkdir -p $DEPLOY_DIR $BACKUP_DIR /var/log/quipu
          
          # Create user if needed
          if ! id -u quipu > /dev/null 2>&1; then
            sudo useradd -r -s /bin/false quipu
          fi
          
          # Stop service if running
          if sudo systemctl is-active --quiet $SERVICE_NAME 2>/dev/null; then
            echo "Stopping service..."
            sudo systemctl stop $SERVICE_NAME
            sleep 5
          fi
          
          # Backup current version
          if [ -f "$DEPLOY_DIR/quipu" ]; then
            echo "Creating backup..."
            sudo cp -r $DEPLOY_DIR $BACKUP_DIR/backup_$TIMESTAMP
          fi
          
          # Extract and install new version
          cd /tmp
          PACKAGE_FILE=$(ls -1 quipu-*.tar.gz | head -1)
          mkdir -p quipu_extract
          cd quipu_extract
          tar -xzf "/tmp/$PACKAGE_FILE"
          sudo cp quipu $DEPLOY_DIR/
          sudo cp version.txt $DEPLOY_DIR/ 2>/dev/null || true
          sudo chmod +x $DEPLOY_DIR/quipu
          
          # Install service file
          if [ -f "quipu.service" ]; then
            sudo cp quipu.service /etc/systemd/system/
            sudo systemctl daemon-reload
          fi
          
          # Create symlink for legacy compatibility (emergency fix)
          echo "Creating legacy compatibility symlink..."
          sudo mkdir -p /var/log
          if [ -f "/var/log/quipu.log" ]; then
            sudo rm -f /var/log/quipu.log
          fi
          sudo ln -sf /var/log/quipu/quipu.log /var/log/quipu.log
          sudo chown quipu:quipu /var/log/quipu.log
          
          # Set ownership and ensure proper permissions
          sudo chown -R quipu:quipu $DEPLOY_DIR /var/log/quipu
          sudo chmod 755 /var/log/quipu
          
          # Test logging setup before starting service
          echo "Testing logging setup..."
          sudo -u quipu touch /var/log/quipu/test.log && sudo -u quipu rm -f /var/log/quipu/test.log || {
            echo "Warning: Cannot write to /var/log/quipu/, fixing permissions..."
            sudo chmod 775 /var/log/quipu
            sudo chown -R quipu:quipu /var/log/quipu
          }
          
          # Test legacy path too
          sudo -u quipu touch /var/log/quipu.log && sudo -u quipu rm -f /var/log/quipu.log || {
            echo "Warning: Cannot write to legacy path /var/log/quipu.log"
            sudo chown quipu:quipu /var/log/quipu.log
          }
          
          # Start service
          echo "Starting service..."
          sudo systemctl enable $SERVICE_NAME
          sudo systemctl start $SERVICE_NAME
          
          # Wait and verify
          sleep 15
          if sudo systemctl is-active --quiet $SERVICE_NAME; then
            echo "✅ Service started successfully"
            sudo systemctl status $SERVICE_NAME --no-pager
          else
            echo "❌ Service failed to start"
            sudo journalctl -u $SERVICE_NAME --lines=30 --no-pager
            exit 1
          fi
          
          # Cleanup
          rm -f /tmp/quipu-*.tar.gz /tmp/version.txt /tmp/quipu.service /tmp/deploy.sh
          rm -rf /tmp/quipu_extract
          
          echo "=== Deployment completed ==="
          DEPLOY_EOF
          
          # Transfer and execute deployment script
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no deploy.sh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/
          
          echo "Executing deployment script..."
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "chmod +x /tmp/deploy.sh && /tmp/deploy.sh" || {
            echo "Deployment script failed, checking logs..."
            ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "sudo journalctl -u quipu.service --lines=20 --no-pager || true"
            exit 1
          }
      
      - name: Health Check
        run: |
          sleep 30
          
          # Create health check script
          cat > health.sh << 'HEALTH_EOF'
          #!/bin/bash
          if sudo systemctl is-active --quiet quipu.service; then
            echo "✅ Service is running"
            if netstat -tuln | grep -q ":8080"; then
              echo "✅ Port 8080 is listening"
            else
              echo "⚠️ Port 8080 not listening"
            fi
            echo "Recent logs:"
            sudo journalctl -u quipu.service --since "5 minutes ago" --no-pager | tail -10
          else
            echo "❌ Service failed"
            sudo journalctl -u quipu.service --lines=20 --no-pager
            exit 1
          fi
          HEALTH_EOF
          
          # Transfer and execute health check
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no health.sh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "chmod +x /tmp/health.sh && /tmp/health.sh"
      
      - name: Deployment result
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful"
          else
            echo "❌ Deployment failed"
          fi
